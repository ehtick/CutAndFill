// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace CutAndFill
{
    public class CutAndFillOutputs: ResultsBase
    {
		/// <summary>
		/// The cut volume.
		/// </summary>
		[JsonProperty("Cut")]
		public double Cut {get;}

		/// <summary>
		/// The fill volume.
		/// </summary>
		[JsonProperty("Fill")]
		public double Fill {get;}

		/// <summary>
		/// The cost to excavate soil on the site.
		/// </summary>
		[JsonProperty("Excavation Cost")]
		public string ExcavationCost {get;}

		/// <summary>
		/// The cost to balance cut and fill on the site.
		/// </summary>
		[JsonProperty("Site Balancing Cost")]
		public string SiteBalancingCost {get;}



        /// <summary>
        /// Construct a CutAndFillOutputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public CutAndFillOutputs() : base()
        {

        }


        /// <summary>
        /// Construct a CutAndFillOutputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public CutAndFillOutputs(double cut, double fill, string excavationCost, string siteBalancingCost): base()
        {
			this.Cut = cut;
			this.Fill = fill;
			this.ExcavationCost = excavationCost;
			this.SiteBalancingCost = siteBalancingCost;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}